function CreateNewProject(%source)
{
   $CurrentProject = new ScriptObject();
   $CurrentProject.targetBuildName = $CurrentEngineBuild.buildName;
   
   if($platform $= "windows")
      $CurrentProject.enableD3D = true;
      
   $CurrentProject.enableOpenGL = true;
   
   $creatingNew = true;
   
   $CurrentProject.newOrExisting = %source;
   
   //clear any flags for modules to be installed
   for(%i=0; %i < getModuleCount(); %i++)
   {
      setVariable("$toInstallModules_" @ %i, false);
   }
   
   MainMenuGui.goToPage("NewProjectPage");
}

function populateProjectProperties()
{
   if($creatingNew)
      updateBreadcrumbList("ProjectsPage;NewProjectPage");
   else
      updateBreadcrumbList("ProjectsPage;ProjectPropertiesPage");
   
   MainMenuGui.setActionBarVisible(!$creatingNew);
   
   MainMenuSearchBar.hidden = true;
   MainMenuSearchClearBtn.hidden = true;
   
   MainViewStack.hidden = false;
   MainViewStack.clear();
         
   if(!$creatingNew || $CurrentProject.newOrExisting $= "New")
   {
      %projectNameCard = createEditCard("Project Name", "TextEdit", "$CurrentProject.projectName", "The name of this project", "");
      MainViewStack.add(%projectNameCard);
      
      //MainViewStack.add(createEditCard("Project Preview Image", "FilePath", "$CurrentProject.previewImage", "The preview image displayed in the project manager for this project. (Optional)", ""));
      
      %projectPathCard = createEditCard("Project Path", "Folder", "$CurrentProject.localPath", "The folder the project will be put into", "");
      MainViewStack.add(%projectPathCard);
      
      if($CurrentProject.targetBuildName $= "" && $CurrentProject.engineBuildId)
      {
         %targetBuild = getEngineBuild($CurrentProject.engineBuildId);
         $CurrentProject.targetBuildName = %targetBuild.buildName;
      }
      
      %buildList = getUsableEngineBuildsList();
      %engineBuildCard = createEditCard("Engine Build", "Dropdown", "$CurrentProject.targetBuildName", "What Engine build is this project using", %buildList);
      MainViewStack.add(%engineBuildCard);
      
      %targetBuildIdx = findEngineBuildByName($CurrentProject.targetBuildName);
      
      if(%targetBuildIdx != 0)
         %targetBuild = getEngineBuild(%targetBuildIdx);
   }
   else if($creatingNew && $CurrentProject.newOrExisting $= "Existing")
   {
      %projectPathCard = createEditCard("Project Path", "Folder", "$CurrentProject.localPath", "The folder the project is in.", "");
      MainViewStack.add(%projectPathCard);
      
      if($CurrentProject.localPath !$= "" && IsDirectory($CurrentProject.localPath))
      {
         %projectNameCard = createEditCard("Project Name", "TextEdit", "$CurrentProject.projectName", "The name of this project", "");
         MainViewStack.add(%projectNameCard);
      
         $CurrentProject.targetBuildName = "Unlisted";
         %engineBuildCard = createEditCard("Engine Build", "Dropdown", "$CurrentProject.targetBuildName", "What Engine build is this project using", "Unlisted");
         MainViewStack.add(%engineBuildCard);
         %engineBuildCard.callonChildren("setActive", false);
         
         %projectNameCard = createEditCard("Build Path", "Folder", "$CurrentProject.buildPath", "The folder cmake generates into.", "");
         MainViewStack.add(%projectNameCard);
         
         if($CurrentProject.projectName !$= "" && $CurrentProject.buildPath !$= "" && IsDirectory($CurrentProject.buildPath))
         {
            %targetBuildIdx = -1;
            %targetBuild = new ScriptObject();
            %targetBuild.isBinary = false;
         }
      }
   }
      
   if(%targetBuildIdx != 0 && isObject(%targetBuild))
   {
      if(!%targetBuild.isBinary)
      {
         %compilerList = getCompilerList();
         %generatorCard = createEditCard("Cmake Generator", "Dropdown", "$CurrentProject.generatorName", "What generator for CMake to run to generate source project files", %compilerList);
         MainViewStack.add(%generatorCard);
         
         %cmakeRoll = new GuiRolloutCtrl() { 
            caption = "CMake Settings";
            extent = MainViewStack.extent.x SPC 40;
            profile = GuiMenuRolloutProfile;
            margin = "5 5 5 5";
            
            new GuiStackControl() {
               internalName = "stack";
               padding = "5";
            };
         };
         
         MainViewStack.add(%cmakeRoll);
         
         if($platform $= "Windows")
         {
            %cmakeRoll-->stack.add(createEditCard("Enable D3D Renderer", "checkbox", "$CurrentProject.enableD3D", "Enable the D3D11 Renderer", "No;Yes"));
         }
         else
         {
            %cmakeRoll-->stack.add(createEditCard("Build in Release Config", "checkbox", "$CurrentProject.releaseMode", "If true, will generate the project in Release mode. If false, it will be in Debug mode", "No;Yes"));  
         }
            
         %cmakeRoll-->stack.add(createEditCard("Enable OpenGL Renderer", "checkbox", "$CurrentProject.enableOpenGL", "Enable the OpenGL Renderer", "No;Yes"));
         
         %cmakeRoll-->stack.add(createEditCard("Enable PhysX Physics Plugin", "checkbox", "$CurrentProject.enablePhysX", "Makes the engine utilize the PhysX Physics Plugin", "No;Yes"));
         %cmakeRoll-->stack.add(createEditCard("Enable Bullet Physics Plugin", "checkbox", "$CurrentProject.enableBullet", "Makes the engine utilize the Bullet Physics Plugin", "No;Yes"));
         %cmakeRoll-->stack.add(createEditCard("Enable SQLite Support", "checkbox", "$CurrentProject.enableSQLite", "Adds SQLite database support", "No;Yes"));
      }
      
      if(!$creatingNew)
      {
         %moduleRoll = new GuiRolloutCtrl() { 
            caption = "Installed Modules";
            extent = MainViewStack.extent.x SPC 40;
            profile = GuiMenuRolloutProfile;
            margin = "5 5 5 5";
            
            new GuiStackControl() {
               internalName = "stack";
               padding = "5";
            };
         };
         
         MainViewStack.add(%moduleRoll);
         
         %gamePath = getProjectGamePath($CurrentProject) @ "/";
         %gamePath = strreplace(%gamePath, "//", "/");
         
         for( %file = findFirstFile( %gamePath @ "data/*.module" );
              %file !$= "";
              %file = findNextFile( %gamePath @ "data/*.module" ))
         {
            %moduleName = fileBase(%file);
            
            %installedModuleTags = "";
            
            //TODO: make this work by checking the template dir's module file definitions
            if(%moduleName $= "UI" || %moduleName $= "ExampleModule" || 
               %moduleName $= "GameUI" || %moduleName $= "Prototyping")
               %installedModuleTags = "Default";
            
            %moduleCard = createCard(%moduleName, "", %installedModuleTags, "", false, "", "button", "", "Remove", "removeModuleFromProject(" @ $CurrentProject @ ", \"" @ %file @ "\");");
            %moduleRoll-->stack.add(%moduleCard);
         }
      }
      else
      {
         %moduleRoll = new GuiRolloutCtrl() { 
            caption = "Available Modules";
            extent = MainViewStack.extent.x SPC 40;
            profile = GuiMenuRolloutProfile;
            margin = "5 5 5 5";
            
            new GuiStackControl() {
               internalName = "stack";
               padding = "5";
            };
         };
         
         MainViewStack.add(%moduleRoll);
         
         %moduleCount = getModuleCount();
         for(%m=1; %m <= %moduleCount; %m++)
         {
            %module = getModule(%m);
            
            if(!isModuleDownloaded(%module))
               continue;
               
            if(isModuleInstalledInProject($CurrentProject, %module))
               continue;
               
            buildModuleToggleCard(%moduleRoll, %module);
         }
      }
   }
   
   if(!$creatingNew)
   {
      %projectNameCard.callonChildren("setActive", false);
      %projectPathCard.callonChildren("setActive", false);
      %engineBuildCard.callonChildren("setActive", false);
      if(!%targetBuild.isBinary)
      {
         %generatorCard.callonChildren("setActive", false);
         //%cmakeRoll.callonChildren("setActive", false);
      }
   }
         
   if($creatingNew)
      MainPanelFooter.setupButtons("Create", "Cancel", "saveNewProject();", "MainMenuGUI.goToPage(\"ProjectsPage\");");
   else
      MainPanelFooter.setupButtons("", "Save", "", "saveCurrentProject();");
   
   %valid = true;
   
   if($creatingNew)
   {
      if($CurrentProject.projectName $= "")
      {
         %valid = false;
         MainPanelFooter.setText("Must define Project name");
      }
      else if($CurrentProject.localPath $= "" || !isDirectory($CurrentProject.localPath))
      {
         %valid = false;
         MainPanelFooter.setText("Must define a valid local folder for Project");
      }
      else if($CurrentProject.localPath !$= "" && $CurrentProject.newOrExisting $= "New")
      {
         %file = findFirstFileMultiExpr( $CurrentProject.localPath @ "/*.*", false);
         if(isFile(%file))
         {
            %valid = false;
            MainPanelFooter.setText("Target folder for new Project must be empty");
         }
      }
      else if(!isObject(%targetBuild))
      {
         %valid = false;
         MainPanelFooter.setText("Must set a valid Engine Build for project");
      }
      else if(!%targetBuild.isBinary && $CurrentProject.generatorName $= "")
      {
         %valid = false;
         MainPanelFooter.setText("Source Engine Builds must set a valid CMake generator");
      }
   }
   
   MainPanelFooter.setOKButtonActive(%valid);
   
   //
   //Now add our action panel buttons
   ActionButtonPanelList.clear();
   
   if($CurrentProject.localPath !$= "")
   {
      if(isFile(getProjectExecutablePath()))
         AddActionButton("ManagerUI:right_image", "Play", "runProject();", "");
         
      AddActionButton("ManagerUI:card_add_image", "Add Module", "openInstallModuleWizard(" @ $CurrentProject @ ");", "");
         
      //AddActionButton("ManagerUI:textField_image", "Open GUI Editor", "", "");
      //AddActionButton("ManagerUI:toolPencil_image", "Open Editor", "", "");
      
      AddActionButton("ManagerUI:cards_seek_top_image", "View Files", "openFileLocation($CurrentProject.localPath);", "");
      
      if(isObject(%targetBuild) && !%targetBuild.isBinary)
      {
         AddActionButton("ManagerUI:arrow_rotate_image", "Regen Project", "regenerateProject();", "");
         
         if($platform $= "windows")
            AddActionButton("ManagerUI:open_image", "Open Solution", "openSolutionFile();", "");
         else
            AddActionButton("ManagerUI:open_image", "Open Build Dir", "openFileLocation($CurrentProject.buildPath);", "");
      }
   }
   
   AddActionButton("ManagerUI:trashcan_image", "Delete Project", "deleteProject(" @ $CurrentProject @ ");", "");
   AddActionButton("ManagerUI:trashcan_image", "Remove From List", "removeProjectFromListing(" @ $CurrentProject @ ");", "");
}

function saveCurrentProject()
{
   if(!isObject($CurrentProject))
      return;
      
   saveProject($CurrentProject);
}

function saveNewProject()
{
   if(!isObject($CurrentProject))
      return;
   
   incrementProjectCount();
   
   %newProjectId = getProjectCount();
   
   $CurrentProject.projectId = %newProjectId;
   
   if($CurrentProject.newOrExisting $= "New")
   {
      generateNewProject();
   }
   else
   {
      saveProject($CurrentProject);
      
      $creatingNew = false;

      //Hop over to the projects page so we can check out our new project
      navToProjectProps($CurrentProject);
      
      MainMenuGui.refresh();
      
      MessageBoxOK("", "Creation of Project " @ $CurrentProject.projectName @ " is complete!");
   }
}

function generateNewProject()
{
   ProgressBarDlg.show();
   ProgressBarDlg.update("Setting up", 0);
   
   $newProject::specialInstructionsFound = false;
   
   %engineBuildId = findEngineBuildByName($CurrentProject.targetBuildName);
   $CurrentProject.engineBuildId = %engineBuildId;
   $newProject::EngineBuild = getEngineBuild(%engineBuildId);
   $newProject::EngineBuildPath = $newProject::EngineBuild.localPath;
   $newProject::NewProjectPath = $CurrentProject.localPath;
   
   $newProject::FullProjectPath = $newProject::NewProjectPath @ "/";
   
   //sanitize the paths to be sure
   $newProject::EngineBuildPath = strReplace($newProject::EngineBuildPath, "//", "/");
   $newProject::FullProjectPath = strReplace($newProject::FullProjectPath, "//", "/");
   
   if(!IsDirectory($newProject::FullProjectPath))
   {
      createPath($newProject::FullProjectPath);
   }

   //displayLoadingSplashGui();
   if(!$newProject::EngineBuild.isBinary)
   {
      $newProject::BuildPath = $newProject::FullProjectPath @ "Build/"; 
      if(!IsDirectory($newProject::BuildPath))
      {
         createPath($newProject::BuildPath);
      } 
      
      $CurrentProject.buildPath = $newProject::BuildPath;
   }
  
   copyProjectFolder($newProject::EngineBuildPath, $newProject::FullProjectPath, "generateNewProjectPhase2();");
   /*{
      MessageBoxOK("Failed.", "Failed to copy the Engine Build to the new project path. Please try again.");  
      return;
   }*/
}

function generateNewProjectPhase2()
{
   if(!$newProject::EngineBuild.isBinary)
   {
      //Install Template files
      %templatePath = $newProject::FullProjectPath @ "Templates/BaseGame/";
      %projectGamePath = $newProject::FullProjectPath @ "My Projects/" @ $CurrentProject.projectName @ "/";
      copyProjectFolder(%templatePath, %projectGamePath, "generateNewProjectPhase3();");
      /*{
         MessageBoxOK("Error.", "Failed to copy the Template game files. Please run the INSTALL project in your IDE.");  
      }  */
   }
   else
   {
      //Do the rename on the exe, torsion, etc files to comply them to the new project name  
      %appPath = findFirstFile( $newProject::FullProjectPath @ "/*.exe", false);
      if(%appPath !$= "")
      {
         %binaryName = fileBase(%appPath);
         
         %newAppPath = strReplace(%appPath, %binaryName, $CurrentProject.projectName);
         pathCopy(%appPath, %newAppPath);
         fileDelete(%appPath);
      }
      
      %appPath = findFirstFile( $newProject::FullProjectPath @ "/*.torsion", false);
      if(%appPath !$= "")
      {
         %binaryName = fileBase(%appPath);
         
         %newAppPath = strReplace(%appPath, %binaryName, $CurrentProject.projectName);
         pathCopy(%appPath, %newAppPath);
         fileDelete(%appPath);
      }
      
      %mainScriptPath = findFirstFile( $newProject::FullProjectPath @ "/main.tscript", false);
      if(%mainScriptPath !$= "")
      {
         replaceInFile(%mainScriptPath, "$appName = \"Torque3D\";", "$appName = \"" @ $CurrentProject.projectName @ "\";");
      } 
      
      generateNewProjectPhase3(); 
   }
}

function generateNewProjectPhase3()
{
   prepFolderCopy("", "", "generateNewProjectPhase4();");
   
   //Install modules
   %moduleCount = getModuleCount();
   for(%m=1; %m <= %moduleCount; %m++)
   {
      %doInstall = getVariable("$toInstallModules_" @ %m);
      if(%doInstall)
      {
         %module = getModule(%m);
         %moduleName = %module.moduleName;
         
         %moduleLocalPath = makeFullPath(%module.localPath) @ "/";
         %moduleLocalPath = strReplace(%moduleLocalPath, "//", "/");
         
         if(!$newProject::EngineBuild.isBinary)
            %moduleInstallPath = $newProject::FullProjectPath @ "/My Projects/" @ $CurrentProject.projectName @ "/game/data/" @ %moduleName @ "/";
         else
            %moduleInstallPath = $newProject::FullProjectPath @ "/data/" @ %moduleName @ "/";
            
         processCopyFiles(%moduleLocalPath, %moduleInstallPath);
         
         %tags = %module.tags;
         %tagCount = getTokenCount(%tags, ",;");  
         
         for(%t=0; %t < %tagCount; %t++)
         {
            %tag = getToken(%tags, ",;", %t);
            if(%tag $= "Special Installation Instruction")
            {
               $newProject::specialInstructionsFound = true;
               break;  
            }
         }
      }
   }
   
   runFileCopy();
}

function generateNewProjectPhase4()
{
   //Finalize
   if(!$newProject::EngineBuild.isBinary)
   {
      //run cmake
      %commandString = "cmake ";

      %commandString = %commandString @ "-S \"" @ $newProject::FullProjectPath @ "\" ";
      %commandString = %commandString @ "-B \"" @ $newProject::BuildPath @ "\" ";
      %commandString = %commandString @ "-G \"" @ $CurrentProject.generatorName @ "\" ";
      %commandString = %commandString @ "-DTORQUE_APP_NAME:STRING=" @ $CurrentProject.projectName @ " -DCMAKE_GENERATOR_PLATFORM=x64";
      if($platform $= "windows")
      {
         %commandString = %commandString @ " -DTORQUE_D3D11:BOOL=" @ $CurrentProject.enableD3D;
      }
      else
      {
         %commandString = %commandString @ " -DTORQUE_RELEASE:BOOL=" @ $CurrentProject.releaseMode;
         %commandString = %commandString @ " -DTORQUE_DEBUG:BOOL=" @ !$CurrentProject.releaseMode;
      }
      %commandString = %commandString @ " -DTORQUE_OPENGL:BOOL=" @ $CurrentProject.enableOpenGL;
      %commandString = %commandString @ " -DTORQUE_PHYSICS_PHYSX3:BOOL=" @ $CurrentProject.enablePhysX;
      %commandString = %commandString @ " -DTORQUE_PHYSICS_BULLET:BOOL=" @ $CurrentProject.enableBullet;
      %commandString = %commandString @ " -DTORQUE_SQLITE:BOOL=" @ $CurrentProject.enableSqlite;
      
      echo("Running Command: " @ %commandString);

      systemCommand(%commandString, "makeProjectComplete");  
   }
   else
   {
      makeProjectComplete();
   }
}

function makeProjectComplete(%resultCode)
{
   $creatingNew = false;
   
   ProgressBarDlg.hide();
   
   if($newProject::specialInstructionsFound)
   {
      MessageBoxOK("", "Some of the modules installed have special installation instructions. You should check any manual steps needed and then regenerate the project.", "");
   }
   
   saveProject($CurrentProject);
   
   if(PMSettings.value("Settings/Building/doAutoBuild", "1"))
   {
      %commandString = "cmake --build \"" @ makeFullPath($CurrentProject.buildPath) @ "\"";
      
      //if windows, we'll wanna force auto-build to always gen release projects
      if($platform $= "windows")
         %commandString = %commandString @ " --config Release";
         
      echo("Running Command: " @ %commandString);
 
      systemCommand(%commandString, ""); 
   }
   else
   {
      openSolutionFile();
   }
   
   //hideLoadingSplashGui();
   
   //Hop over to the projects page so we can check out our new project
   navToProjectProps($CurrentProject);
   
   MessageBoxOK("", "Creation of Project " @ $CurrentProject.projectName @ " is complete!");
}

function getUsableEngineBuildsList()
{
   %buildCount = getEngineBuildCount();
   
   %buildList = "";
   for(%i=1; %i <= %buildCount; %i++)
   {
      %bld = getEngineBuild(%i);
      
      %buildName = %bld.buildName;
      
      if(!isEngineBuildDownloaded(%bld))
         continue;

      if(%buildList $= "")
         %buildList = %buildName;
      else
         %buildList = %buildList @ ";" @ %buildName; 
   }
   
   if(%buildList $= "")
      %buildList = "No Valid Engine Builds";
      
   return %buildList;
}

function getCompilerList()
{
   %compilerList = "";
   if($platform $= "windows")
   {
      %compilerList = "Visual Studio 17 2022;Visual Studio 16 2019"; 
   }  
   else if($platform $= "macOS")
   {
      %compilerList = "XCode";
   } 

   if(%compilerList $= "")
      %compilerList = "Unix Makefile";
   else 
      %compilerList = %compilerList @ ";Unix Makefile";
   
   return %compilerList;
}

function removeModuleFromProject(%project, %moduleFile)
{
   MessageBoxOKCancel("Confirm", "Are you sure you want to delete the " @ fileBase(%moduleFile) @ " module from project: " @ %project.projectName, 
                        "doRemoveModuleFromProject("@%project@", \""@%moduleFile@"\");", "");
}

function doRemoveModuleFromProject(%project, %moduleFile)
{
   %modulePath = filePath(%moduleFile);
   
   deleteFolder(%modulePath);

   MainMenuGUI.refresh(); 
}

function installModuleToProject(%project, %module)
{
   openInstallModuleWizard(%module);
}

function isModuleInstalledInProject(%project, %module)
{
   %gamePath = getProjectGamePath($CurrentProject) @ "/";
   %gamePath = strreplace(%gamePath, "//", "/");
   
   //only really comes up in the case of not-yet generated projects(or lost refs)
   if(!isDirectory( %gamePath @ "data/"))
      return false;

   for( %file = findFirstFile( %gamePath @ "data/*.module" );
        %file !$= "";
        %file = findNextFile( %gamePath @ "data/*.module" ))
   {
      %moduleName = fileBase(%file);
      
      if(%module.moduleName $= %moduleName)
         return true;
   }
   
   return false;
}

function moduleHasTag(%module, %tagToCheck)
{
   %tags = getModuleTags(%module.moduleId);
   
   %tagCount = getTokenCount(%tags, ",;");
   if(%tagCount != 0)
   {
      for(%t=0; %t < %tagCount; %t++)
      {
         %tag = getToken(%tags, ",;", %t);
         
         if(%tagToCheck $= %tag)
            return true;
      }
   }
   
   return false;
}

function buildModuleToggleCard(%rollout, %module, %depth)
{
   if(%depth $= "")
      %depth = 0;
      
   %tag = "";
   if(moduleHasTag(%module, "Rapid Prototype Kit"))
   {
      %tag = "Rapid Prototype Kit";
   }
      
   %moduleCard = createEditCard(%module.moduleName, "checkbox", "$toInstallModules_" @ %module.moduleId, %tag, "No;Yes", true, %depth);
   %rollout-->stack.add(%moduleCard);            
            
   if(%module.dependencies !$= "")
   {
      %depCount = getTokenCount(%module.dependencies, ",;");
      for(%i=0; %i < %depCount; %i++)
      {
         %depName = getToken(%module.dependencies, ",;", %i);
         %depModuleId = findModuleByName(%depName);
         if(%depModuleId != 0)
         {
            %depModule = getModule(%depModuleId);
            
            buildModuleToggleCard(%rollout, %depModule, %depth+1);
         }
      }
   }
}